<template>
	<view class="flex-1">
		<live-pusher
			id="livePusher"
			ref="livePusher"
			class="livePusher"
			:url="src"
			:mode="mode"
			:enable-camera="enableCamera"
			:auto-focus="true"
			:device-position="device - position"
			:beauty="beauty"
			:whiteness="whiteness"
			aspect="9:16"
			@statecchange="statechange"
			@netstatus="netstatus"
			@error="rooro"
			:style="'height:' + windowHeight + 'px;'"
			style="width: 750rpx;"
		></live-pusher>
		<!-- 头部 -->
		<view style="position: fixed; left: 0; right: 0;" :style="'top:' + statusBarHeight + 'px'">
			<!-- 个人信息 | 观看详情信息 -->
			<view class="px-2 flex justify-between align-center" style="height: 80rpx;">
				<view style="width: 325rpx; background-color: rgba(0, 0, 0, 0.4);" class="flex rounded-circle">
					<view class="p">
						<image
							:src="user.avatar || '/static/62.jpg'"
							style="width: 70rpx; height: 70rpx;"
							class="rounded-circle"
						></image>
					</view>
					<view class="flex-1 flex justify-center flex-column">
						<text class="text-white font">{{ user.nickname || user.username }}</text>
						<text class="text-white font-sm">{{ detail.look_count }}</text>
					</view>
					<view class="p">
						<view class="rounded-circle flex-center bg-main" style="width: 70rpx; height: 70rpx;">
							<text class="text-white">+</text>
						</view>
					</view>
				</view>
				<view style="width: 325rpx; background-color: rgba(0, 0, 0, 0.4);" class="flex rounded-circle">
					<scroll-view scroll-x="true" class="flex-1 flex">
						<view class="p" v-for="(item, index) in list" :key="index">
							<image
								:src="item.avatar || '../../static/gift/8.png'"
								style="width: 70rpx; height: 70rpx;"
								class="rounded-circle"
							></image>
						</view>
					</scroll-view>
					<view class="p">
						<view class="rounded-circle flex-center bg-main" style="width: 70rpx; height: 70rpx;">
							<text class="text-white font-sm">{{ list.length }}</text>
						</view>
					</view>
				</view>
			</view>
			<!-- 金币 -->
			<view class="flex justify-between align-center px-2 my-2" style="height: 80rpx;">
				<view
					class="flex rounded-circle align-center"
					style="width: 325rpx; background-color: rgba(0, 0, 0, 0.4);"
				>
					<view class="p"><text class="text-warning">金币</text></view>
					<view class="flex-1 flex flex-column justify-center">
						<text class="text-white font">{{ detail.coin }}</text>
					</view>
				</view>

				<view @click="back()">
					<image
						src="../../static/img/exit.png"
						style="width: 60rpx; height: 60rpx;"
						class="rounded-circle"
					></image>
				</view>
			</view>
			<!-- 收到礼物 -->
			<f-gift ref="gift"></f-gift>
		</view>

		<!-- 弹幕 -->
		<f-danmu ref="danmu"></f-danmu>

		<!-- 底部 -->
		<view
			class="flex align-center justify-between"
			style="position: fixed; left: 0; bottom: 0; right: 0; height: 120rpx;"
		>
			<view
				class="flex-1 flex-center flex-column"
				v-for="(item, index) in btns"
				:key="index"
				@click="handleBottomEvent(item)"
			>
				<text class="iconfont text-white mb-1">{{ item.icon }}</text>
				<text class="text-white font">{{ item.name }}</text>
			</view>
		</view>

		<uni-popup type="bottom" ref="popup">
			<view class="bg-white">
				<view class="flex-center border-bottom" style="height: 90rpx;">
					<text class="font-md">{{ popupTitle }}</text>
				</view>
				<!-- 画质选择 -->
				<view v-if="popupType === 'mode'">
					<view
						class="flex-center py-2"
						v-for="(item, index) in modeList"
						:key="index"
						:class="mode === item.type ? 'bg-main' : ''"
						@click="chooseMode(item)"
					>
						<text class="font-md" :class="mode === item.type ? 'text-white' : ''">{{ item.desc }}</text>
					</view>
				</view>
				<!-- 美颜 -->
				<view v-else-if="popupType === 'beauty'">
					<slider
						:min="0"
						:max="9"
						:step="1"
						:value="beauty"
						:block-size="18"
						show-value
						@change="handleSliderChange"
					/>
				</view>
				<!-- 美白 -->
				<view v-else-if="popupType === 'whiteness'">
					<slider
						:min="0"
						:max="9"
						:step="1"
						:value="whiteness"
						:block-size="18"
						show-value
						@change="handleSliderChange"
					/>
				</view>
				<!-- 更多 -->
				<view class="flex flex-wrap">
					<view class="flex-center flex-column" style="width: 150rpx; height: 150rpx;" @click="pauseOrPlay">
						<text class="iconfont mb-1">&#xe611;</text>
						<text class="font">{{ isPause ? '继续' : '暂停' }}</text>
					</view>
					<view class="flex-center flex-column" style="width: 150rpx; height: 150rpx;" @click="back()">
						<text class="iconfont mb-1">&#xe64d;</text>
						<text class="font">退出</text>
					</view>
				</view>
				<view class="f-divider"></view>
				<view class="flex-center" style="height: 90rpx;" hover-class="bg-light" @click="closePopup">
					<text class="font-md">取消</text>
				</view>
			</view>
		</uni-popup>
	</view>
</template>

<script>
import fGift from '../../components/live/f-gift.vue';
import fDanmu from '../../components/live/f-danmu.vue';
import uniPopup from '../../components/uni-ui/uni-popup/uni-popup.vue';
import myGifts from '../../common/gifts.js';
import $H from '@/common/request.js';
import $C from '@/common/config.js';
import { mapState } from 'vuex';
export default {
	components: {
		fGift,
		fDanmu,
		uniPopup
	},
	data() {
		return {
			statusBarHeight: 0,
			content: '',
			gifts: [],
			giftActiveId: 0,
			// 标清模式
			mode: 'SD',
			// 是否启用摄像头
			enableCamera: true,
			// 默认摄像头
			position: 'back',
			// 美颜度
			beauty: 0,
			// 美白度
			whiteness: 0,
			// 窗体高度
			windowHeight: 0,
			// 上下文
			context: null,
			modeList: [
				{
					type: 'SD',
					desc: '标清'
				},
				{
					type: 'HD',
					desc: '高清'
				},
				{
					type: 'FHD',
					desc: '超清'
				}
			],
			popupType: 'mode',
			btns: [
				{
					name: '翻转',
					icon: '\ue605',
					event: 'switchCamera'
				},
				{
					name: '画质',
					icon: '\ue60c',
					event: 'openPopup',
					params: 'mode'
				},
				{
					name: '美颜',
					icon: '\ue632',
					event: 'openPopup',
					params: 'beauty'
				},
				{
					name: '美白',
					icon: '\ue631',
					event: 'openPopup',
					params: 'whiteness'
				},
				{
					name: '更多',
					icon: '\ue84b',
					event: 'openPopup',
					params: 'more'
				}
			],
			detail: {
				created_time: '',
				id: 0,
				title: '',
				cover: '',
				user_id: 0,
				look_count: 0,
				coin: 0,
				key: '',
				status: 0,
				userId: 0,
				user: {
					id: 0,
					username: '',
					avatar: ''
				}
			},
			sign: '',
			list: [],
			// 是否开始推流
			isStart: false,
			isPause: false,
			isget: false
		};
	},
	methods: {
		/**
		 * 加入或离开直播间
		 * @param {Object} type
		 */
		joinOrLeaveLive(type) {
			if (this.socket && this.token) {
				this.socket.emit(type + 'Live', {
					live_id: this.detail.id,
					token: this.token
				})
			}
		},
		/**
		 * @param {Object} e
		 */
		handleLiveEvent(e) {
			let d = e.data;
			console.log(e.type + '>>>>>>>>>>' + e.data);
			switch (e.type) {
				case 'online':
					if (d.action === 'join') {
						this.list = d.data;
					}
					if (d.action === 'leave') {
						this.list = d.data;
					}
					break;
				case 'comment':
					this.$refs.danmu.send({
						id: d.id,
						name: d.user.name,
						content: d.content
					});
					break;
				case 'gift':
					d.gift_image = $C.imageUrl + d.gift_image;
					this.detail.coin += d.grift_coin * d.num;
					this.$refs.gift.send(d);
					break;
				default:
					break;
			}
		},
		/**
		 * 停止推流
		 */
		stop() {
			this.context.resume({
				success: () => {
					this.isStart = false;
					$H.post(
						'/live/changestatus',
						{
							id: this.detail.id,
							type: 'play'
						},
						{
							token: true
						}
					);
				}
			});
		},
		/**
		 * 继续推流
		 */
		resume() {
			this.context.resume({
				success: () => {
					this.isPause = false;
					$H.post(
						'/live/changestatus',
						{
							id: this.detail.id,
							type: 'play'
						},
						{
							token: true
						}
					);
				}
			});
		},
		/**
		 * 暂停推流
		 */
		pause() {
			this.context.pause({
				success: () => {
					this.isPause = true;
					$H.post(
						'/live/changestatus',
						{
							id: this.detail.id,
							type: 'pause'
						},
						{
							token: true
						}
					);
				}
			});
		},
		/**
		 * 开始推流
		 */
		start() {
			this.context.start({
				success: () => {
					this.isStart = true;
					$H.post(
						'/live/changestatus',
						{
							id: this.detail.id,
							type: 'play'
						},
						{
							token: true
						}
					)
						.then(res => {
							this.joinOrLeaveLive('join');
						})
						.catch(err => {
							console.log(err);
						});
				}
			});
		},
		pauseOrPlay() {
			if (!this.isPause) {
				return uni.showModal({
					content: '是否要暂停推流？',
					success: res => {
						if (res.cancel) {
							return;
						}
						this.pause();
					}
				});
			}
			// 继续推流
			this.resume();
		},
		//
		handleBottomEvent(item) {
			this[item.event](item.params);
		},
		back() {
			uni.showModal({
				content: '是否要退出当前直播?',
				success: res => {
					if (res.cancel) {
						return;
					}
					this.stop();
					this.isget = true;
					uni.navigateBack({
						delta: 1
					});
					uni.showToast({
						title: '退出直播间成功',
						icon: 'none'
					});
				}
			});
		},
		/**
		 * 画质选择
		 * @param {Object} item
		 */
		chooseMode(item) {
			this.mode = item.type;
			uni.showToast({
				title: '画质切换为' + item.desc,
				icon: 'none'
			});
			this.$refs.popup.close();
		},
		/**
		 * 打开弹出框
		 * @param {Object} type
		 */
		openPopup(type) {
			this.popupType = type;
			this.$refs.popup.open();
		},
		closePopup() {
			this.$refs.popup.close();
		},
		/**
		 * 切换镜头
		 */
		switchCamera() {
			this.context.switchCamera({
				success: e => {
					this.position = this.position === 'back' ? 'front' : 'back';
				}
			});
		},
		/**
		 * 开启预览
		 */
		startPreview() {
			this.context.startPreview({
				success: e => {
					console.log(e);
				}
			});
		},

		/**
		 * 直播状态的变化
		 * @param {Object} e
		 */
		statechange(e) {
			console.log(e);
		},

		/**
		 * 直播网络的变化
		 * @param {Object} e
		 */
		netstatus(e) {
			console.log(e);
		},

		/**
		 * 直播出错
		 */
		error() {
			console.log(e);
		},
		handleSliderChange(e) {
			this[this.popupType] = e.detail.value;
		},
		EnableCamera() {
			this.enableCamera = true;
		},
		startLive() {
			this.context.start({
				success: a => {
					console.log('livePusher.start:' + JSON.stringify(a));
				}
			});
		},
		stopLive() {
			this.context.stop({
				success: a => {
					console.log(JSON.stringify(a));
				}
			});
		}
	},
	onLoad(e) {
		let res = uni.getSystemInfoSync();
		this.statusBarHeight = res.statusBarHeight;
		this.windowHeight = res.windowHeight;

		if (e.options) {
			let options = JSON.parse(e.options);
			this.mode = options.mode;
			this.position = options.position;
			this.beauty = options.beauty;
			this.whiteness = options.whiteness;
		}
		if (e.data) {
			let d = JSON.parse(decodeURIComponent(e.data));
			this.detail = d.data;
			this.sign = d.sign;
		}
		// 监听全局事件
		uni.$on('live', this.handleLiveEvent);
	},
	onReady() {
		this.context = uni.createLivePusherContext('livePusher', this);
		this.startPreview();
		// 开始推流
		this.start();
	},
	destroyed() {
		// 离开直播间
		this.joinOrLeaveLive('leave');
		// 移除全局事件
		uni.$off('live', this.handleLiveEnent);
	},
	mounted() {},
	onBackPress() {
		if (!this.isget) {
			this.back();
			return true;
		}
	},
	computed: {
		...mapState({
			user: state => state.user,
			socket: state => state.socket,
			token: state => state.token
		}),
		popupTitle() {
			let o = {
				mode: '画质',
				beauty: '美颜',
				whiteness: '美白',
				more: '更多'
			};
			return o[this.popupType];
		},
		src() {
			if (this.detail.key == '' || this.sign == '') {
				return '';
			}
			console.log('推流：');
			console.log(`${$C.livePushBaseUrl}/live/${this.detail.key}?sign=${this.sign}`);
			return `${$C.livePushBaseUrl}/live/${this.detail.key}?sign=${this.sign}`;
		}
	}
};
</script>

<style scoped>
.btn {
	height: 80rpx;
	border-radius: 100rpx;
	background-color: rgba(255, 255, 255, 0.12);
	align-items: center;
	justify-content: center;
}
.btn-icon {
	width: 80rpx;
	margin-right: 20rpx;
}
</style>
